Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки





Кафедра «Програмної інженерії»







Звіт з лабораторної роботи № 5
з дисципліни «Архітектура програмного забезпечення»
на тему:  «РОЗГОРТАННЯ СИСТЕМИ»




Виконала	
ст. гр. ПЗПІ-22-2	
Білоус Дар’я Олександрівна	 


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2025


1 ІСТОРІЯ ЗМІН 
№
Дата 
Версія звіту
Опис змін та виправлень
1
08.06.2025
0.1 
Створено звіт


2 ЗАВДАННЯ
Розгорнути та продемонструвати роботу усієї розробленої програмної системи.
3 ОПИС ВИКОНАНОЇ РОБОТИ
У рамках виконання завдання було розроблено розгортання системи за допомогою веб клієнта. Зокрема, спочатку було здійснено налаштування та запуск серверної частини, яка виконує ключові функції – обробку запитів, управління логікою бізнес-процесів, а також організацію взаємодії між різними модулями системи. Вона обмінюється даними з веб-застосунком, мобільною прикладною програмою та IoT-пристроями через HTTP-протокол, що дозволяє забезпечити уніфіковану та безпечну комунікацію між компонентами. Користувачі взаємодіють із системою за допомогою веб-інтерфейсу або мобільного застосунку. Клієнтська частина, у свою чергу, надсилає запити до серверної частини, отримуючи у відповідь необхідну інформацію або результати обробки даних. Таким чином, було виконано загальне проектування та налаштування архітектури системи, яка забезпечує повноцінну інтеграцію клієнтських додатків, серверної логіки та зовнішніх IoT-пристроїв.
До виконаної роботи було створено відеозвіт, посилання на який наведено у додатку А. ER-діаграма наведена в додатку Б на рисунку Б.1. Структура бази даних наведена на діаграмі в додатку Б на рисунку Б.2. UML-діаграма прецедентів знаходиться на рисунку Б.3. Приклади програмного коду наведені в додатку В.

4 ВИСНОВКИ
У результаті виконання лабораторної роботи було виконано та продемонстровано розгортання системи.



















ДОДАТОК А
Відеозапис 

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/d8ON7AuQ7Zw 

Хронологічний опис відеозапису:
0:00 Вступ
00:33 Функціональність веб-застосунку
09:11 Функціональність мобільного застосунку
15:17 Демонстрація збору та відправки даних IoT пристроєм








ДОДАТОК Б
ГРАФІЧНІ МАТЕРІАЛИ



Рисунок Б.1 — ER-діаграма даних



Рисунок Б.2 — Структура бази даних






Рисунок Б.3 — UML-діаграма прецедентів



ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureBilousDaria/apz-pzpi-22-2-bilous-daria/blob/main/Lab%203/pzpi-22-2-bilous-daria-lab3-code/src/components/forms/AuthForm/AuthForm.jsx 
1. import React, {useContext, useState} from 'react';
2. import {Alert, Button, Form} from "react-bootstrap";
3. import {authorization} from "../../../API/authApi";
4. import {MAIN_PAGE_PATH, REGISTRATION_PAGE_PATH, UNEXPECTED_ERROR} from "../../../utils/consts";
5. import {Link, useNavigate} from "react-router-dom";
6. import {observer} from "mobx-react-lite";
7. import {Context} from "../../../index";
8. import {decodeToken} from "react-jwt";
9. import {useTranslation} from "react-i18next";
10.
11. const AuthForm = observer(() => {
12.     const { t } = useTranslation();
13.     const [authData, setAuthData] = useState({
14.         email: '',
15.         password: ''
16.     });
17.
18.     const [error, setError] = useState('');
19.
20.     const { userStore } = useContext(Context);
21.     const navigation = useNavigate();
22.
23.     const handleChange = (e) => {
24.         setAuthData({
25.             ...authData,
26.             [e.target.name]: e.target.value
27.         })
28.     }
29.
30.     const handleAuthClick = async (e) => {
31.         e.preventDefault();
32.         try {
33.             const formData = new FormData();


34.             formData.append('email', authData.email);
35.             formData.append('password', authData.password);
36.             const response = await authorization(formData);
37.             if (response.token) {
38.                 localStorage.setItem('token', response.token);
39.                 userStore.setUser(decodeToken(response.token));
40.                 userStore.setIsAuth(true);
41.                 navigation(MAIN_PAGE_PATH);
42.             }
43.         } catch (error) {
44.             if (error.response && error.response.status === 400){
45.                 setError(error.response.data.message);
46.             } else {
47.                 setError(UNEXPECTED_ERROR);
48.             }
49.         }
50.     }
51.
52.     return (
53.         <Form>
54.             <Form.Group className={"mb-3"} controlId={"authFormEmail"}>
55.                 <Form.Label>Email</Form.Label>
56.                 <Form.Control name={"email"} type={"email"} placeholder={"Email"} onChange={handleChange}/>
57.                 <Form.Control.Feedback type={'invalid'}>{t('enterEmail')}</Form.Control.Feedback>
58.             </Form.Group>
59.             <Form.Group className={"mb-3"} controlId={"authPassword"}>
60.                 <Form.Label>{t('password')}</Form.Label>
61.                 <Form.Control name={"password"} type={"password"} placeholder={t('password')} onChange={handleChange}/>
62.             </Form.Group>
63.             <p className={"mb-2"}>{t('dontHaveAccount')} <Link to={REGISTRATION_PAGE_PATH}>{t('registration!')}</Link></p>

64.             {error && (
65.                 <Alert variant={"danger"}>
66.                     {error}
67.                 </Alert>
68.             )}
69.             <Button variant={"primary"} type={"button"} className={"col-md-3"} onClick={handleAuthClick}>
70.                 {t('enter')}
71.             </Button>
72.         </Form>
73.     );
74. });
75.
76. export default AuthForm;

В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureBilousDaria/apz-pzpi-22-2-bilous-daria/blob/main/Lab%203/pzpi-22-2-bilous-daria-lab3-code/src/components/AppRouter.js 
1. import React, {useContext} from 'react';
2. import { Route, Routes} from "react-router-dom";
3. import defaultRoutes, {adminRoutes, authRoutes} from "../routes";
4. import {observer} from "mobx-react-lite";
5. import {Context} from "../index";
6. import {hasUserRole} from "../utils/hasUserRole";
7. import {getRoleTitles} from "../utils/getRoleTitles";
8. import {RoleEnum} from "../utils/enums/RoleEnum";
9. import adminNavigation from "./AdminComponents/AdminNavigation";
10.
11. const AppRouter = observer(() => {
12.     const { userStore } = useContext(Context);
13.
14.     return (
15.         <Routes>
16.             { defaultRoutes.map(({path, Element} ) => (
17.                 <Route key={path} path={path} element={<Element />} />


18.             ))}
19.             { userStore.isAuth && authRoutes.map(({path, Element}) => (
20.                 <Route key={path} path={path} element={< Element />} />
21.             )) }
22.             { userStore.isAuth &&  getRoleTitles(userStore.user.roles).includes(RoleEnum.ADMIN) && adminRoutes.map(({path, Element}) => (
23.                 <Route key={path} path={path} element={<Element />} />
24.             ))}
25.         </Routes>
26.
27.     );
28. });
29.
30. export default AppRouter;


В.3 Резервне копіювання користувацьких даних
GitHub репозиторій: https://github.com/NureBilousDaria/apz-pzpi-22-2-bilous-daria/blob/main/Lab%203/pzpi-22-2-bilous-daria-lab3-code/src/App.js 
1. import AppRouter from "./components/AppRouter";
2. import {BrowserRouter} from "react-router-dom";
3. import './styles/App.css';
4. import Header from "./components/header/Header";
5. import {observer} from "mobx-react-lite";
6. import {useContext, useEffect} from "react";
7. import {Context} from "./index";
8. import {checkAuth} from "./API/authApi";
9. import Footer from "./components/footer/Footer";
10.
11. const App = observer(() => {
12.     const { userStore } = useContext(Context);
13.
14.     useEffect(() => {
15.         const getUserData = async () => {
16.             try {
17.                 console.log('update')
18.                 const data = await checkAuth();
19.                 userStore.setUser(data);
20.                 userStore.setIsAuth(true);
21.             } catch (error) {

22.                 userStore.setUser(null);
23.                 userStore.setIsAuth(false);
24.             }
25.         }
26.
27.         getUserData().then();
28.     }, [userStore, localStorage]);
29.
30.     return (
31.         <BrowserRouter >
32.             <div className={'app__container'} >
33.                 <div className={'app__header-container'}>
34.                     <Header />
35.                 </div>
36.                 <div className={'app__main-container'}>
37.                     <AppRouter />
38.                 </div>
39.                 <div className={'app__footer-container'}>
40.                     <Footer />
41.                 </div>
42.             </div>
43.         </BrowserRouter>
44.       );
45. });
46.
47. export default App;


