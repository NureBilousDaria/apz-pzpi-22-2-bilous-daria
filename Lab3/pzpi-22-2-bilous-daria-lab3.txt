Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії







ЗВІТ
з лабораторної роботи № 3
з дисципліни «Архітектура програмного забезпечення»
на тему:  «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА
ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ КЛІЄНТА
ПРОГРАМНОЇ СИСТЕМИ»




Виконала	
ст. гр. ПЗПІ-22-2	
Білоус Дар’я Олександрівна	 


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович










Харків 2025




1 ІСТОРІЯ ЗМІН 

№
Дата 
Версія звіту
Опис змін та виправлень
1
13.05.2025
0.1 
Створено розділ «Завдання»
2
21.05.2025
0.1
Додано додатки


2 ЗАВДАННЯ

Розробити клієнтську / front-end частину програмної системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ

Для реалізації клієнтської частини застосунку було використано бібліотеку React.js. Архітектура проєкту побудована за модульним принципом, що передбачає поділ за функціональними зонами: окремі каталоги або файли відповідають за певні аспекти логіки — компоненти, сторінки, API-запити, керування станом, стилі тощо. Компоненти, утиліти, типи та функції для взаємодії з API спроектовані з урахуванням принципів повторного використання та масштабованості. 
     Відеозапис роботи системи наведено в додатку А. ER-діаграму представлено в додатку Б на рисунку Б.1, структуру бази даних – на рисунку Б.2. UML-діаграму прецедентів зображено на рисунку Б.3, UML-діаграму компонентів – на рисунку Б.4, UML-діаграму станів – на рисунку Б.5, UML-діаграму діяльності – на рисунку Б.6.     

4 ВИСНОВКИ

Під час виконання лабораторної роботи була розроблена клієнтська / front-end частина програмної системи.


ДОДАТОК А
Відеозапис 
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/rCX60u0huX0 

Хронологічний опис відеозапису:

0:00 - Вступ 
00:19 - Опис технологій, опис архітектури.
00:38 - Інтернаціоналізація. 
00:50 - Реєстрація. 
01:11 - Керування профілем. 
01:41 - Взаємодія з PayPal API. 
02:58 - Керування бізнес-сутностями компанії. 
08:20 - Панель адміністрування системи.







ДОДАТОК Б
Графічні матеріали



Рисунок Б.1 – ER-діаграма даних



Рисунок Б.2 – Структура бази даних


Рисунок Б.3 – UML-діаграма прецедентів


Рисунок Б.4 – UML-діаграма компонентів


Рисунок Б.5 – UML-діаграма станів



Рисунок Б.6 – UML-діаграма діяльності








ДОДАТОК В
Програмний код
В.1 Математична обробка прикладних даних

GitHub репозиторій: https://github.com/NureBilousDaria/apz-pzpi-22-2-bilous-daria/blob/main/Lab%203/pzpi-22-2-bilous-daria-lab3-code/src/components/forms/AuthForm/AuthForm.jsx 

    1. import React, {useContext, useState} from 'react';
    2. import {Alert, Button, Form} from "react-bootstrap";
    3. import {authorization} from "../../../API/authApi";
    4. import {MAIN_PAGE_PATH, REGISTRATION_PAGE_PATH, UNEXPECTED_ERROR} from "../../../utils/consts";
    5. import {Link, useNavigate} from "react-router-dom";
    6. import {observer} from "mobx-react-lite";
    7. import {Context} from "../../../index";
    8. import {decodeToken} from "react-jwt";
    9. import {useTranslation} from "react-i18next";
    10. 
    11. const AuthForm = observer(() => {
    12.     const { t } = useTranslation();
    13.     const [authData, setAuthData] = useState({
    14.         email: '',
    15.         password: ''
    16.     });
    17. 
    18.     const [error, setError] = useState('');
    19. 
    20.     const { userStore } = useContext(Context);
    21.     const navigation = useNavigate();
    22. 
    23.     const handleChange = (e) => {
    24.         setAuthData({
    25.             ...authData,
    26.             [e.target.name]: e.target.value
    27.         })
    28.     }
    29. 
    30.     const handleAuthClick = async (e) => {
    31.         e.preventDefault();
    32.         try {
    33.             const formData = new FormData();



    34.             formData.append('email', authData.email);
    35.             formData.append('password', authData.password);
    36.             const response = await authorization(formData);
    37.             if (response.token) {
    38.                 localStorage.setItem('token', response.token);
    39.                 userStore.setUser(decodeToken(response.token));
    40.                 userStore.setIsAuth(true);
    41.                 navigation(MAIN_PAGE_PATH);
    42.             }
    43.         } catch (error) {
    44.             if (error.response && error.response.status === 400){
    45.                 setError(error.response.data.message);
    46.             } else {
    47.                 setError(UNEXPECTED_ERROR);
    48.             }
    49.         }
    50.     }
    51. 
    52.     return (
    53.         <Form>
    54.             <Form.Group className={"mb-3"} controlId={"authFormEmail"}>
    55.                 <Form.Label>Email</Form.Label>
    56.                 <Form.Control name={"email"} type={"email"} placeholder={"Email"} onChange={handleChange}/>
    57.                 <Form.Control.Feedback type={'invalid'}>{t('enterEmail')}</Form.Control.Feedback>
    58.             </Form.Group>
    59.             <Form.Group className={"mb-3"} controlId={"authPassword"}>
    60.                 <Form.Label>{t('password')}</Form.Label>
    61.                 <Form.Control name={"password"} type={"password"} placeholder={t('password')} onChange={handleChange}/>
    62.             </Form.Group>
    63.             <p className={"mb-2"}>{t('dontHaveAccount')} <Link to={REGISTRATION_PAGE_PATH}>{t('registration!')}</Link></p>
    64.             {error && (
    65.                 <Alert variant={"danger"}>
    66.                     {error}
    67.                 </Alert>
    68.             )}
    69.             <Button variant={"primary"} type={"button"} className={"col-md-3"} onClick={handleAuthClick}>
    70.                 {t('enter')}
    71.             </Button>
    72.         </Form>
    73.     );
    74. });
    75. 
    76. export default AuthForm;

В.2 Адміністрування бізнес-логіки системи

GitHub репозиторій: https://github.com/NureBilousDaria/apz-pzpi-22-2-bilous-daria/blob/main/Lab%203/pzpi-22-2-bilous-daria-lab3-code/src/components/AppRouter.js 

    1. import React, {useContext} from 'react';
    2. import { Route, Routes} from "react-router-dom";
    3. import defaultRoutes, {adminRoutes, authRoutes} from "../routes";
    4. import {observer} from "mobx-react-lite";
    5. import {Context} from "../index";
    6. import {hasUserRole} from "../utils/hasUserRole";
    7. import {getRoleTitles} from "../utils/getRoleTitles";
    8. import {RoleEnum} from "../utils/enums/RoleEnum";
    9. import adminNavigation from "./AdminComponents/AdminNavigation";
    10. 
    11. const AppRouter = observer(() => {
    12.     const { userStore } = useContext(Context);
    13. 
    14.     return (
    15.         <Routes>
    16.             { defaultRoutes.map(({path, Element} ) => (
    17.                 <Route key={path} path={path} element={<Element />} />
    18.             ))}



    19.             { userStore.isAuth && authRoutes.map(({path, Element}) => (
    20.                 <Route key={path} path={path} element={< Element />} />
    21.             )) }
    22.             { userStore.isAuth &&  getRoleTitles(userStore.user.roles).includes(RoleEnum.ADMIN) && adminRoutes.map(({path, Element}) => (
    23.                 <Route key={path} path={path} element={<Element />} />
    24.             ))}
    25.         </Routes>
    26. 
    27.     );
    28. });
    29. 
    30. export default AppRouter;


В.3 Резервне копіювання користувацьких даних

GitHub репозиторій: https://github.com/NureBilousDaria/apz-pzpi-22-2-bilous-daria/blob/main/Lab%203/pzpi-22-2-bilous-daria-lab3-code/src/App.js 

    1. import AppRouter from "./components/AppRouter";
    2. import {BrowserRouter} from "react-router-dom";
    3. import './styles/App.css';
    4. import Header from "./components/header/Header";
    5. import {observer} from "mobx-react-lite";
    6. import {useContext, useEffect} from "react";
    7. import {Context} from "./index";
    8. import {checkAuth} from "./API/authApi";
    9. import Footer from "./components/footer/Footer";
    10. 
    11. const App = observer(() => {
    12.     const { userStore } = useContext(Context);
    13. 
    14.     useEffect(() => {
    15.         const getUserData = async () => {
    16.             try {
    17.                 console.log('update')
    18.                 const data = await checkAuth();
    19.                 userStore.setUser(data);
    20.                 userStore.setIsAuth(true);
    21.             } catch (error) {



    22.                 userStore.setUser(null);
    23.                 userStore.setIsAuth(false);
    24.             }
    25.         }
    26. 
    27.         getUserData().then();
    28.     }, [userStore, localStorage]);
    29. 
    30.     return (
    31.         <BrowserRouter >
    32.             <div className={'app__container'} >
    33.                 <div className={'app__header-container'}>
    34.                     <Header />
    35.                 </div>
    36.                 <div className={'app__main-container'}>
    37.                     <AppRouter />
    38.                 </div>
    39.                 <div className={'app__footer-container'}>
    40.                     <Footer />
    41.                 </div>
    42.             </div>
    43.         </BrowserRouter>
    44.       );
    45. });
    46. 
    47. export default App;

