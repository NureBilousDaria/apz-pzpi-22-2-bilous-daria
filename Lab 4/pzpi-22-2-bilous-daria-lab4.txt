Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки





Кафедра «Програмної інженерії»







Звіт з лабораторної роботи № 4
з дисципліни «Архітектура програмного забезпечення»
на тему:  «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА
ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ МОБІЛЬНОГО КЛІЄНТА
ПРОГРАМНОЇ СИСТЕМИ»





Виконала	
ст. гр. ПЗПІ-22-2	
Білоус Дар’я Олександрівна	 


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович






Харків 2025


1 ІСТОРІЯ ЗМІН 
№
Дата 
Версія звіту
Опис змін та виправлень
1
25.05.2025
0.1 
Створено розділ «Завдання»
2
05.06.2025
0.2
Додано додатки


    2 ЗАВДАННЯ
Розробити мобільний застосунок для  платформи Android із використанням мови програмування Kotlin.
    3 ОПИС ВИКОНАНОЇ РОБОТИ
Для цієї лабораторної роботи було розроблено мобільний застосунок. У якості мови програмування було обрано Kotlin. Архітектура – MVVM, тому що в структурі проєкту є моделі, які представляють дані та змінюють їх у відповідь на дії контролера, view - представляють дані для користувача,  контролери, які у відповідь на взаємодію користувача змінюють дані моделей. 
     Після закінчення розробки був створений відеозапис, посилання на який знаходиться у додатку А. 
     ER-діаграма наведена в додатку Б на рисунку Б.1. Структура бази даних наведена на діаграмі в додатку Б на рисунку Б.2. UML-діаграма прецедентів знаходиться на рисунку Б.3. 
     Приклади програмного коду наведені в додатку В.



    4 ВИСНОВКИ
Під час виконання лабораторної роботи був розроблений мобільний застосунок для платформи Android.



















ДОДАТОК А
Відеозапис 

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/t72X8pjw360

Хронологічний опис відеозапису:
0:00 Вступ 
00:16 Опис технологій, опис архітектури 
00:53 Реєстрація та авторизація 
02:09 Перегляд профілю користувача 
02:43 Керування бізнес-сутностями компанії







ДОДАТОК Б
ГРАФІЧНІ МАТЕРІАЛИ



Рисунок Б.1 — ER-діаграма даних



Рисунок Б.2 — Структура бази даних



Рисунок Б.3 — UML-діаграма прецедентів














ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureBilousDaria/apz-pzpi-22-2-bilous-daria/blob/main/Lab%204/pzpi-22-2-bilous-daria-lab4-code/app/src/main/java/com/example/tasksyncmobileapp/view/worker/OneWorkerActivity.kt 
    1. package com.example.tasksyncmobileapp.view.worker
    2. 
    3. import android.content.Intent
    4. import android.os.Build
    5. import androidx.appcompat.app.AppCompatActivity
    6. import android.os.Bundle
    7. import android.view.View
    8. import androidx.annotation.RequiresApi
    9. import androidx.lifecycle.lifecycleScope
    10. import com.example.tasksyncmobileapp.BuildConfig
    11. import com.example.tasksyncmobileapp.R
    12. import com.example.tasksyncmobileapp.controller.UserController
    13. import com.example.tasksyncmobileapp.controller.WorkerController
    14. import com.example.tasksyncmobileapp.databinding.ActivityOneWorkerBinding
    15. import com.example.tasksyncmobileapp.model.Role
    16. import com.example.tasksyncmobileapp.network.RetrofitClient
    17. import com.example.tasksyncmobileapp.repository.UserRepository
    18. import com.example.tasksyncmobileapp.repository.WorkerRepository
    19. import com.example.tasksyncmobileapp.util.classes.FileManager
    20. import com.example.tasksyncmobileapp.util.classes.Jwt
    21. import com.example.tasksyncmobileapp.util.classes.TokenManager
    22. import com.example.tasksyncmobileapp.util.functions.getAge



    23. import com.example.tasksyncmobileapp.util.functions.getEducations
    24. import com.example.tasksyncmobileapp.util.functions.getErrorMessage
    25. import com.example.tasksyncmobileapp.util.functions.getRolesString
    26. import com.example.tasksyncmobileapp.util.functions.hasOtherUserRole
    27. import com.example.tasksyncmobileapp.util.functions.hasUserRoles
    28. import com.example.tasksyncmobileapp.view.HeaderFragment
    29. import com.example.tasksyncmobileapp.view.activities.OneActivity
    30. import kotlinx.coroutines.launch
    31. 
    32. class OneWorkerActivity : AppCompatActivity() {
    33. 
    34.     private lateinit var binding: ActivityOneWorkerBinding
    35.     private lateinit var intentWorkers: Intent
    36.     private lateinit var userController: UserController
    37.     private lateinit var workerController: WorkerController
    38.     private lateinit var tokenManager: TokenManager
    39.     private lateinit var workerActivityIntent: Intent
    40.     private lateinit var oneActivityIntent: Intent
    41. 
    42.     @RequiresApi(Build.VERSION_CODES.O)
    43.     override fun onCreate(savedInstanceState: Bundle?) {
    44.         super.onCreate(savedInstanceState)
    45.         binding = ActivityOneWorkerBinding.inflate(layoutInflater)
    46.         setContentView(binding.root)
    47.         binding.bOneWorkerAddOrDeleteRole.visibility = View.INVISIBLE
    48.         supportFragmentManager.beginTransaction()
    49.             .replace(R.id.header, HeaderFragment())
    50.             .commit()




    51.         intentWorkers = Intent(this, WorkerActivity::class.java)
    52.         tokenManager = TokenManager(binding.root.context)
    53. 
    54.         val workerId = intent.getIntExtra("WORKER_ID", -1)
    55. 
    56.         val retrofitClient = RetrofitClient()
    57.         val userRepository = UserRepository(retrofitClient.apiService)
    58.         userController = UserController(userRepository)
    59. 
    60.         val workerRepository = WorkerRepository(retrofitClient.apiService)
    61.         val workerController = WorkerController(workerRepository)
    62. 
    63.         workerActivityIntent = Intent(this, WorkerActivity::class.java)
    64. 
    65. 
    66.         binding.apply {
    67.             bOneWorkerBack.setOnClickListener {
    68.                 startActivity(intentWorkers)
    69.             }
    70. 
    71.             bOneWorkerDelete.setOnClickListener {
    72.                 val token = tokenManager.getToken()
    73.                 if (token != null) {
    74.                     lifecycleScope.launch {
    75.                         workerController.deleteUserFromCompany(token, workerId)
    76.                         startActivity(workerActivityIntent)
    77.                     }
    78.                 }
    79.             }
    80. 
    81.             bOneWorkerSet2Activity.setOnClickListener {
    82.                 val token = tokenManager.getToken()
    83.                 if (token != null) {
    84.                     lifecycleScope.launch {



    85.                         val result = workerController.getActivityForOneEmployee(token, workerId)
    86.                         result.onSuccess { response ->
    87.                             oneActivityIntent = Intent(binding.root.context, OneActivity::class.java).apply {
    88.                                 putExtra("ACTIVITY_ID", response.activity.id)
    89.                             }
    90.                             startActivity(oneActivityIntent)
    91.                         }.onFailure {throwable ->
    92.                             tvOneWorkerError.visibility = View.VISIBLE
    93.                             tvOneWorkerError.text = getErrorMessage(throwable)
    94.                         }
    95.                     }
    96.                 }
    97.             }
    98.         }
    99. 
    100.         setData(workerId)
    101.     }
    102. 
    103.     @RequiresApi(Build.VERSION_CODES.O)
    104.     private fun setData(id: Int) {
    105. 
    106.         binding.oneWorkerProgressBar.visibility = View.VISIBLE
    107. 
    108.         binding.apply {
    109.             tvOneWorkerEmail.visibility = View.INVISIBLE
    110.             tvOneWorkerAge.visibility = View.INVISIBLE
    111.             tvOneWorkerBithday.visibility = View.INVISIBLE
    112.             tvOneWorkerFirstName.visibility = View.INVISIBLE
    113.             tvOneWorkerSurname.visibility = View.INVISIBLE




    114.             tvOneWorkerPhone.visibility = View.INVISIBLE
    115.             tvOneWorkerEducations.visibility = View.INVISIBLE
    116.             tvOneWorkerRoles.visibility = View.INVISIBLE
    117.             bOneWorkerSet2Activity.visibility = View.GONE
    118. 
    119. 
    120.         }
    121. 
    122.         val token = tokenManager.getToken()
    123.         if (token != null) {
    124.             lifecycleScope.launch {
    125.                 val result = userController.getUserById(id, token)
    126.                 result.onSuccess {response ->
    127.                     val user = response.user
    128.                     val roles = response.role
    129.                     val educations = response.educations
    130.                     val fileManager = FileManager()
    131.                     fileManager.loadImage2ImageView(
    132.                         BuildConfig.BASE_IMAGE_URL + user.userImage,
    133.                         binding.ivOneWorkerImage,
    134.                         400,
    135.                         400
    136.                     )
    137.                     binding.apply {
    138.                         tvOneWorkerEmail.text = "Email адреса: ${user.email}"
    139.                         tvOneWorkerAge.text = "Вік: ${getAge(user.birthday)}"
    140.                         tvOneWorkerBithday.text = "День народження: ${user.birthday}"
    141.                         tvOneWorkerFirstName.text = "Ім\'я: ${user.firstName}"
    142.                         tvOneWorkerSurname.text = "Прізивще: ${user.secondName}"
    143.                         tvOneWorkerEducations.text = "Освіти:\n ${getEducations(educations)}"
    144.                         tvOneWorkerRoles.text = "Ролі:\n ${getRolesString(roles)}"



    145. 
    146. 
    147.                         oneWorkerProgressBar.visibility = View.GONE
    148. 
    149.                         tvOneWorkerEmail.visibility = View.VISIBLE
    150.                         tvOneWorkerAge.visibility = View.VISIBLE
    151.                         tvOneWorkerBithday.visibility = View.VISIBLE
    152.                         tvOneWorkerFirstName.visibility = View.VISIBLE
    153.                         tvOneWorkerSurname.visibility = View.VISIBLE
    154.                         tvOneWorkerEducations.visibility = View.VISIBLE
    155.                         if (user.phoneNumber.isNotEmpty()) {
    156.                             tvOneWorkerPhone.text = "Номер телефону: ${user.phoneNumber}"
    157.                         } else {
    158.                             tvOneWorkerPhone.visibility = View.GONE
    159.                         }
    160.                         tvOneWorkerEducations.visibility = View.VISIBLE
    161.                         tvOneWorkerRoles.visibility = View.VISIBLE
    162. 
    163.                         setRoleButton(roles, id)
    164.                     }
    165.                 }
    166.             }
    167.         }
    168. 
    169.     }
    170. 
    171. 
    172.     @RequiresApi(Build.VERSION_CODES.O)
    173.     private fun setRoleButton(roles: List<Role>, workerId: Int) {
    174.         val token = tokenManager.getToken()
    175.         if (token != null) {
    176.             val jwt = Jwt()



    177.             val user = jwt.decodeJWT(token)
    178. 
    179.             if (hasUserRoles(listOf("COMPANY_ADMIN", "SUBSCRIBER"), token)) {
    180.                 binding.bOneWorkerAddOrDeleteRole.visibility = View.VISIBLE
    181.                 binding.bOneWorkerSet2Activity.visibility = View.VISIBLE
    182.                 if (hasOtherUserRole(roles, listOf("COMPANY-ADMIN"))) {
    183.                     binding.bOneWorkerAddOrDeleteRole.text = "Видалити роль адміна компанії"
    184.                     binding.bOneWorkerAddOrDeleteRole.setOnClickListener {
    185.                         lifecycleScope.launch {
    186.                             userController.deleteRole(token, workerId, "COMPANY-ADMIN")
    187.                             setData(workerId)
    188.                         }
    189.                     }
    190.                 } else {
    191.                     binding.bOneWorkerAddOrDeleteRole.text = "Додати роль адміна компанії"
    192.                     binding.bOneWorkerAddOrDeleteRole.setOnClickListener {
    193.                         lifecycleScope.launch {
    194.                             userController.addRole(token, workerId, "COMPANY-ADMIN")
    195.                             setData(workerId)
    196.                         }
    197.                     }
    198.                 }
    199.             } else {
    200.                 binding.bOneWorkerAddOrDeleteRole.visibility = View.GONE
    201.                 binding.bOneWorkerSet2Activity.visibility = View.GONE
    202.             }
    203.         }
    204.     }
    205. } 



В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureBilousDaria/apz-pzpi-22-2-bilous-daria/blob/main/Lab%204/pzpi-22-2-bilous-daria-lab4-code/app/src/main/java/com/example/tasksyncmobileapp/view/auth/LoginActivity.kt 
    1. package com.example.tasksyncmobileapp.view.auth
    2. 
    3. import android.content.Intent
    4. import androidx.appcompat.app.AppCompatActivity
    5. import android.os.Bundle
    6. import android.view.View
    7. import androidx.lifecycle.lifecycleScope
    8. import com.example.tasksyncmobileapp.controller.AuthController
    9. import com.example.tasksyncmobileapp.databinding.ActivityLoginBinding
    10. import com.example.tasksyncmobileapp.model.dto.AuthDto
    11. import com.example.tasksyncmobileapp.network.RetrofitClient
    12. import com.example.tasksyncmobileapp.repository.AuthRepository
    13. import com.example.tasksyncmobileapp.util.classes.TokenManager
    14. import com.example.tasksyncmobileapp.util.functions.getErrorMessage
    15. import com.example.tasksyncmobileapp.view.profile.ProfileActivity
    16. import kotlinx.coroutines.launch
    17. 
    18. class LoginActivity : AppCompatActivity() {
    19.     private lateinit var binding: ActivityLoginBinding
    20.     private lateinit var authController: AuthController
    21.     private lateinit var profileIntent: Intent
    22.     override fun onCreate(savedInstanceState: Bundle?) {
    23.         super.onCreate(savedInstanceState)
    24.         binding = ActivityLoginBinding.inflate(layoutInflater)


    25.         setContentView(binding.root)
    26. 
    27.         profileIntent = Intent(this, ProfileActivity::class.java)
    28.         val registrationIntent = Intent(this, RegistrationActivity::class.java)
    29.         val retrofit = RetrofitClient()
    30.         val authRepository = AuthRepository(retrofit.apiService)
    31.         authController = AuthController(authRepository)
    32. 
    33.         binding.apply {
    34.             bAuthorize.setOnClickListener {
    35.                 login()
    36.             }
    37.             tvAuthGoToRegistration.setOnClickListener {
    38.                 startActivity(registrationIntent)
    39.             }
    40.         }
    41. 
    42.     }
    43. 
    44.     private fun login () {
    45.         binding.apply {
    46.             val email = editTextTextEmailAddress.text.toString()
    47.             val password = editTextTextPassword.text.toString()
    48. 
    49.             val authDto = AuthDto(email, password)
    50. 
    51.             lifecycleScope.launch {
    52.                 val result = authController.auth(authDto)
    53.                 result.onSuccess {authResponse ->
    54.                     val tokenManager = TokenManager(root.context)
    55.                     tokenManager.saveToken(authResponse.token)
    56.                     startActivity(profileIntent)
    57.                 }.onFailure { throwable ->
    58.                     tvAuthrError.visibility = View.VISIBLE



    59.                     tvAuthrError.text = getErrorMessage(throwable)
    60.                 }
    61.             }
    62.         }
    63.     }
    64. }


В.3 Резервне копіювання користувацьких даних
GitHub репозиторій: https://github.com/NureBilousDaria/apz-pzpi-22-2-bilous-daria/blob/main/Lab%204/pzpi-22-2-bilous-daria-lab4-code/app/src/main/java/com/example/tasksyncmobileapp/util/classes/TokenManager.kt 
    1. package com.example.tasksyncmobileapp.util.classes
    2. 
    3. import android.content.Context
    4. import android.content.SharedPreferences
    5. 
    6. class TokenManager(private val context: Context) {
    7. 
    8.     private val sharedPreferences: SharedPreferences by lazy {
    9.         context.getSharedPreferences("MyPrefs", Context.MODE_PRIVATE)
    10.     }
    11. 
    12.     fun saveToken(token: String) {
    13.         val editor = sharedPreferences.edit()
    14.         editor.putString("token", token)
    15.         editor.apply()
    16.     }
    17. 
    18.     fun getToken(): String? {
    19.         return sharedPreferences.getString("token", null)
    20.     }
    21. 
    22.     fun clearToken(){
    23.         val editor = sharedPreferences.edit()
    24.         editor.remove("token")
    25.         editor.apply()
    26.     }
    27. }
